"""
Django settings for jmeter_platform project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import datetime

# celery配置redis作为broker。redis有16个数据库，编号0~15，这里使用第1个。
BROKER_URL = 'redis://127.0.0.1:6379/0'
# 设置存储结果的后台
RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
# 可接受的内容格式
ACCEPT_CONTENT = "json"
# 任务序列化数据格式
TASK_SERIALIZER = "json"
# 结果序列化数据格式
RESULT_SERIALIZER = "json"
# celery时区设置
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = False

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# 日志目录
BASE_LOG_DIR = os.path.join(BASE_DIR, "log")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!!b%$cg&h9=we*w=&=d#6xdp4jl(ib%r%#$$sco5c*_olk^-(p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'flower',
    'csvs',
    'jmxs',
    'users',
    'tasks',
    'jtls',
    'reports',
    'params',
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jmeter_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jmeter_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jmeter_platform',
        'USER': 'root',
        'PASSWORD': '12345678',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        #这里引擎用innodb（默认myisam）
        #因为后面第三方登录时，要求引擎为INNODB
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


LOGGING = {
  'version': 1, # 保留字
  'disable_existing_loggers': False, # 是否禁用已经存在的日志实例
  'formatters': { # 定义日志的格式
    'standard': {
      'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
           '[%(levelname)s][%(message)s]'
    },
    'simple': {
      'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
    },
    'collect': {
      'format': '%(message)s'
    }
  },
  'filters': { # 定义日志的过滤器
    'require_debug_true': {
      '()': 'django.utils.log.RequireDebugTrue',
    },
  },
  'handlers': { # 日志处理程序
    'console': {
      'level': 'DEBUG',
      'filters': ['require_debug_true'], # 只有在Django debug为True时才在屏幕打印日志
      'class': 'logging.StreamHandler',
      'formatter': 'simple'
    },
    'SF': {
      'level': 'INFO',
      'class': 'logging.handlers.RotatingFileHandler', # 保存到文件，根据文件大小自动切
      'filename': os.path.join(BASE_LOG_DIR, "jmeter_platform_info.log"), # 日志文件
      'maxBytes': 1024 * 1024 * 500, # 日志大小 50M（最好不要超过1G）
      'backupCount': 3, # 备份数为3 xx.log --> xx.log.1 --> xx.log.2 --> xx.log.3
      'formatter': 'standard',
      'encoding': 'utf-8', # 文件记录的编码格式
    },
    'TF': {
      'level': 'INFO',
      'class': 'logging.handlers.TimedRotatingFileHandler', # 保存到文件，根据时间自动切
      'filename': os.path.join(BASE_LOG_DIR, "jmeter_platform_info.log"), # 日志文件
      'backupCount': 3, # 备份数为3 xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
      'when': 'D', # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
      'formatter': 'standard',
      'encoding': 'utf-8',
    },
    'error': {
      'level': 'ERROR',
      'class': 'logging.handlers.RotatingFileHandler', # 保存到文件，自动切
      'filename': os.path.join(BASE_LOG_DIR, "jmeter_platform_err.log"), # 日志文件
      'maxBytes': 1024 * 1024 * 5, # 日志大小 50M
      'backupCount': 5,
      'formatter': 'standard',
      'encoding': 'utf-8',
    },
    'collect': {
      'level': 'INFO',
      'class': 'logging.handlers.RotatingFileHandler', # 保存到文件，自动切
      'filename': os.path.join(BASE_LOG_DIR, "jmeter_platform_collect.log"),
      'maxBytes': 1024 * 1024 * 50, # 日志大小 50M
      'backupCount': 5,
      'formatter': 'collect',
      'encoding': "utf-8"
    },
    'celery': {
        # 'level': 'INFO',
        # 'class': 'logging.handlers.RotatingFileHandler',
        'level': 'DEBUG',
        'formatter': 'standard',
        'class': 'logging.handlers.TimedRotatingFileHandler',
        'filename': os.path.join(BASE_LOG_DIR, "celery_tasks.log"), # 日志文件
        'when': 'midnight',
        'encoding': 'utf-8',
    },
    'celery_error': {
      # 'level': 'INFO',
      # 'class': 'logging.handlers.RotatingFileHandler',
      'level': 'ERROR',
      'formatter': 'standard',
      'class': 'logging.handlers.TimedRotatingFileHandler',
      'filename': os.path.join(BASE_LOG_DIR, "celery_tasks_error.log"),  # 日志文件
      'when': 'midnight',
      'encoding': 'utf-8',
    }
  },
  'loggers': { # 日志实例
    '': { # 默认的logger应用如下配置
      'handlers': ['SF', 'console', 'error'], # 上线之后可以把'console'移除
      'level': 'DEBUG',
      'propagate': True, # 是否向上一级logger实例传递日志信息
    },
    'collect': { # 名为 'collect' 的logger还单独处理
      'handlers': ['TF', 'console', 'collect', 'error'],
      'level': 'DEBUG',
    },
    'celery_task': { # 名为 'celery' 的logger还单独处理
      'handlers': ['celery', 'celery_error'], # 只将日志打印到指定的handler中
      'level': 'DEBUG',
    }
  },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# 重载系统的用户，让UserProfile生效/MxShop/apps/users/models/UserProfile
AUTH_USER_MODEL = 'users.UserProfile'
# 不能删除STATIC_URL
STATIC_URL = '/static/'

JMX_URL = "performance_files/jmx/"
CSV_URL = "performance_files/csv/"
JTL_URL = "performance_files/jtl/"
OUTPUT_URL = "performance_files/output/"
TEMP_URL = "performance_files/temp/"
JMX_CSV_DIR = os.path.join(BASE_DIR, "performance_files")
JMETER = os.path.join(BASE_DIR, "jmeter5/bin/jmeter.sh")
JMETER_PLUGINS_CMD = os.path.join(BASE_DIR, "jmeter5/bin/JMeterPluginsCMD.sh")


JMX_ALLOWED_FILE_TYPE = ['.jmx']
CSV_ALLOWED_FILE_TYPE = ['.csv']

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    #  处理没有被捕获的异常
    'EXCEPTION_HANDLER': 'jmeter_platform.exception.exception_handler',
}

JWT_AUTH = {
    # 过期时间
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # header的token字符串前缀，默认貌似就是JWT
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    # 自定义认证结果：见下方序列化user和自定义response
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.views.jwt_response_payload_handler',
}

# 解决跨域问题
CORS_ORIGIN_ALLOW_ALL = True

AUTHENTICATION_BACKENDS =(
    'users.views.CustomBackend',
)

